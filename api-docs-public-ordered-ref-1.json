{
    "swagger": "2.0",
    "info": {
        "description": "Endpoints of the Routee API",
        "version": "1.0",
        "title": "Routee API",
        "contact": {
            "name": "Routee API",
            "url": "www.routee.net",
            "email": "info@routee.net"
        },
        "license": {
            "name": "license"
        }
    },
    "host": "connect.routee.net",
    "basePath": "/",
    "tags": [
        {
            "name": "Messaging API",
            "description": "API resources for sending SMS"
        },
        {
            "name": "Messaging Campaign API",
            "description": "API resources for sending multiple messages or campaigns"
        },
        {
            "name": "Quiet Hours API",
            "description": "API resources to get which countries are enabled for the quiet hours feature"
        },
        {
            "name": "SMS Tracking API",
            "description": "API resources for trackings your message consumption"
        },
        {
            "name": "Lookup API",
            "description": "API resources for the Lookup service"
        },
        {
            "name": "Two Step Verification API",
            "description": "API resources for the Two Step Verification service"
        },
        {
            "name": "Contacts API",
            "description": "API resources for contacts"
        },
        {
            "name": "Contact Groups API",
            "description": "API resources for managing contact groups and segments"
        },
        {
            "name": "Contact Labels Management API",
            "description": "API resources for managing contact labels"
        },
        {
            "name": "Contacts Blacklist Management API",
            "description": "API resources for handling blacklists for your contacts"
        },
        {
            "name": "Account API",
            "description": "API resources for managing your Routee accounts"
        },
        {
            "name": "Reports API",
            "description": "API resources for getting reports for all Routee services"
        },
        {
            "name": "System API",
            "description": "API resources for system"
        }
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/2step": {
            "post": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "create verification",
                "description": "creates a new verification and sends the message to the recipient",
                "operationId": "verifyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "request",
                        "description": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VerificationDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new verification",
                        "schema": {
                            "$ref": "#/definitions/VerificationStatusDto"
                        }
                    }
                }
            }
        },
        "/2step/reports": {
            "get": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "head": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingHEAD_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingPUT_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingDELETE_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingOPTIONS_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report (per account)",
                "description": "retrieves the report for the logged in account",
                "operationId": "reportUsingPATCH_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            }
        },
        "/2step/reports/applications/{applicationId}": {
            "get": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "head": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingHEAD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingOPTIONS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "Twostep Report",
                "description": "retrieves the report for a specific application",
                "operationId": "reportUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "applicationId",
                        "in": "path",
                        "description": "applicationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TwoStepReportDto"
                        }
                    }
                }
            }
        },
        "/2step/{trackingId}": {
            "get": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "verification status",
                "description": "Retrieves the status of an existing verification",
                "operationId": "statusUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The status of the verification",
                        "schema": {
                            "$ref": "#/definitions/VerificationStatusDto"
                        }
                    },
                    "404": {
                        "description": "In the verification with the given id is not found",
                        "schema": {
                            "$ref": "#/definitions/VerificationNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "verify answer",
                "description": "checks the answer to complete the verification proccess",
                "operationId": "confirmUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "answer",
                        "in": "query",
                        "description": "answer",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new status of the verification",
                        "schema": {
                            "$ref": "#/definitions/VerificationStatusDto"
                        }
                    },
                    "400": {
                        "description": "In case the provided answer is wrong",
                        "schema": {
                            "$ref": "#/definitions/WrongAnswerServiceException"
                        }
                    },
                    "404": {
                        "description": "In the verification with the given id is not found",
                        "schema": {
                            "$ref": "#/definitions/VerificationNotFoundServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Two Step Verification API"
                ],
                "summary": "invalidate verification",
                "description": "invalidates an in progress verification",
                "operationId": "invalidateUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new status of the verification",
                        "schema": {
                            "$ref": "#/definitions/VerificationStatusDto"
                        }
                    },
                    "400": {
                        "description": "In the verification is not in pending status",
                        "schema": {
                            "$ref": "#/definitions/InvalidVerificationStatusServiceException"
                        }
                    },
                    "404": {
                        "description": "In the verification with the given id is not found",
                        "schema": {
                            "$ref": "#/definitions/VerificationNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/accounts/me/balance": {
            "get": {
                "tags": [
                    "Account API"
                ],
                "summary": "account balance",
                "description": "Retrieves the balance for the currently logged account",
                "operationId": "getBalanceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "The balance of the current account",
                        "schema": {
                            "$ref": "#/definitions/BalanceDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/accounts/me/banks": {
            "get": {
                "tags": [
                    "Account API"
                ],
                "summary": "bank accounts",
                "description": "Retrieves the available bank accounts for the account",
                "operationId": "getBanksUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "The balance of the current account",
                        "schema": {
                            "$ref": "#/definitions/PricingEntityDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/accounts/me/transactions": {
            "get": {
                "tags": [
                    "Account API"
                ],
                "summary": "get transactions",
                "description": "Retrieve all transactions of the logged in master account.",
                "operationId": "getTransactionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "from",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "to",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The transactions of the master account",
                        "schema": {
                            "$ref": "#/definitions/TransactionDto"
                        }
                    }
                }
            }
        },
        "/campaigns/{trackingId}": {
            "get": {
                "tags": [
                    "Messaging Campaign API"
                ],
                "summary": "Campaign",
                "description": "Returns a campaign",
                "operationId": "getCampaignUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The campaign",
                        "schema": {
                            "$ref": "#/definitions/CampaignDto"
                        }
                    },
                    "404": {
                        "description": "In case the campaign was not found"
                    }
                }
            }
        },
        "/contacts/labels/my": {
            "get": {
                "tags": [
                    "Contact Labels Management API"
                ],
                "summary": "All contact fields for the account of the user who performed the request",
                "description": "Returns all fields, default and custom. It is map with the field name as key and the field data type as value",
                "operationId": "getAllUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "The fields of the account",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contact Labels Management API"
                ],
                "summary": "Creates contact fields definitions on the account that the user performed the request",
                "description": "Returns all newly created field definitions. It is a collection, where each entry contains the field name and the field data type as properties",
                "operationId": "createUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "fieldDefinitions",
                        "description": "fieldDefinitions",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LabelDefinitionDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created field definitions for the current account",
                        "schema": {
                            "$ref": "#/definitions/LabelDefinitionDto"
                        }
                    },
                    "400": {
                        "description": "Duplicate field name found within the request",
                        "schema": {
                            "$ref": "#/definitions/DuplicateCustomLabelNameServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "Field Definition already exists",
                        "schema": {
                            "$ref": "#/definitions/FieldDefinitionAlreadyExistsServiceException"
                        }
                    }
                }
            }
        },
        "/contacts/my": {
            "get": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "My contacts based on pagination criteria",
                "description": "Retrieves the contacts of the current account",
                "operationId": "getMyUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "countTotal",
                        "in": "query",
                        "description": "countTotal",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group of contacts with pagination information",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "Create a new contact",
                "description": "Creates a new contact associated with the account of the current user",
                "operationId": "createMyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contactDTO",
                        "description": "contactDTO",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the newly created contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "400": {
                        "description": "Custom fields are invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidCustomFieldsServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "Some Custom fields share the same name",
                        "schema": {
                            "$ref": "#/definitions/DuplicateCustomFieldServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "Delete multiple contacts",
                "description": "Deletes multiple contacts of the current user",
                "operationId": "deleteMultipleUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contacts",
                        "description": "contacts",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A set with the deleted contact ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "500": {
                        "description": "Contact was not deleted",
                        "schema": {
                            "$ref": "#/definitions/ContactNotDeletedServiceException"
                        }
                    }
                }
            }
        },
        "/contacts/my/blacklist/{serviceName}": {
            "get": {
                "tags": [
                    "Contacts Blacklist Management API"
                ],
                "summary": "Gets all the contacts which are blacklisted for the specified service",
                "description": "Gets a collection of contacts",
                "operationId": "getBlacklistUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "serviceName",
                        "in": "path",
                        "description": "serviceName",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Sms",
                            "TwoStep",
                            "Audio",
                            "Lookup"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The collection of blacklisted contacts",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contacts Blacklist Management API"
                ],
                "summary": "Add multiple contacts to the blacklist of a specific service",
                "description": "Adds contacts in the blacklist",
                "operationId": "addToBlacklistUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contactDtos",
                        "description": "contactDtos",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactDto"
                            }
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "path",
                        "description": "serviceName",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Sms",
                            "TwoStep",
                            "Audio",
                            "Lookup"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the deleted contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Contact is not found",
                        "schema": {
                            "$ref": "#/definitions/ContactNotFoundServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contacts Blacklist Management API"
                ],
                "summary": "Remove one or more contacts from the blacklist of a specific service",
                "description": "Removes the contacts from the blacklist",
                "operationId": "removeMultipleFromBlacklistUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contactDtos",
                        "description": "contactDtos",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactDto"
                            }
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "path",
                        "description": "serviceName",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Sms",
                            "TwoStep",
                            "Audio",
                            "Lookup"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of the updated contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Contact is not found",
                        "schema": {
                            "$ref": "#/definitions/ContactNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/contacts/my/blacklist/{serviceName}/groups": {
            "delete": {
                "tags": [
                    "Contacts Blacklist Management API"
                ],
                "summary": "Removes contacts from the blacklist of a specific service that belong to the given groups",
                "description": "Removes contacts from the blacklist",
                "operationId": "removeFromBlacklistByGroupsUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "groups",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "path",
                        "description": "serviceName",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Sms",
                            "TwoStep",
                            "Audio",
                            "Lookup"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of the affected contacts",
                        "schema": {
                            "$ref": "#/definitions/NumericUpdateResultDto"
                        }
                    },
                    "401": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/contacts/my/mobile": {
            "head": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "Mobile availability",
                "description": "Determines whether a contact with the provided mobile exists",
                "operationId": "existsByMobileUsingHEAD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "value",
                        "in": "query",
                        "description": "value",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If a contact with the mobile exists"
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/contacts/my/{id}": {
            "get": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "One of my contacts based on the contact's id",
                "description": "Retrieved one of the contacts of the current account",
                "operationId": "getOneUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The retrieved contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "Update contact based on id",
                "description": "Updates a contact of the current user",
                "operationId": "updateMyUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contactDTO",
                        "description": "contactDTO",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the updated contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "400": {
                        "description": "Custom labels are invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidCustomFieldsServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "Some Custom labels share the same name",
                        "schema": {
                            "$ref": "#/definitions/DuplicateCustomFieldServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contacts API"
                ],
                "summary": "Delete a contact based on id",
                "description": "Deletes a contact of the current user",
                "operationId": "deleteMyUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the deleted contact",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "500": {
                        "description": "Contact was not deleted",
                        "schema": {
                            "$ref": "#/definitions/ContactNotDeletedServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my": {
            "get": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "All of the account's contact groups",
                "description": "Retrieves the available group tags of an account",
                "operationId": "getAllMyUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "The contact groups and the number of contacts in each group",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Adds a new contact group tag to the account",
                "description": "Creates and adds a new group tag to the associated account",
                "operationId": "createGroupUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groupCreationDto",
                        "description": "groupCreationDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupCreationDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group has been successfully created",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "400": {
                        "description": "Search filters are invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidSearchFiltersServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "The contact group already exists",
                        "schema": {
                            "$ref": "#/definitions/ContactListAlreadyExistsServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Deletes a contact group",
                "description": "Based on a url parameter this call either deletes the contact group tag or both the contact group tag and the contacts associated with it",
                "operationId": "deleteGroupsUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tags",
                        "description": "tags",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "deleteContacts",
                        "in": "query",
                        "description": "deleteContacts",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group has been successfully removed",
                        "schema": {
                            "$ref": "#/definitions/GroupDeleteResponseDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my/difference": {
            "post": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Creates a new group to the account from the difference of a group of existing groups",
                "description": "Creates a new group by the difference of the given existing groups",
                "operationId": "createGroupFromDifferenceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groupDifferenceDto",
                        "description": "groupDifferenceDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupMergeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group has been successfully created",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "401": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "One of the groups was not found",
                        "schema": {
                            "$ref": "#/definitions/ContactListNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "The contact group already exists",
                        "schema": {
                            "$ref": "#/definitions/ContactListAlreadyExistsServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my/merge": {
            "post": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Creates a new group to the account from the merge of a group of existing groups",
                "description": "Creates a new group by merging given existing groups",
                "operationId": "createGroupFromUnionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groupMergeDto",
                        "description": "groupMergeDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupMergeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group has been successfully merged",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "401": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "One of the groups was not found",
                        "schema": {
                            "$ref": "#/definitions/ContactListNotFoundServiceException"
                        }
                    },
                    "409": {
                        "description": "The contact group already exists",
                        "schema": {
                            "$ref": "#/definitions/ContactListAlreadyExistsServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my/page": {
            "get": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "A page of the account's contact groups",
                "description": "Retrieves a page of the available group tags of an account",
                "operationId": "getMyPagedUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "withCounts",
                        "in": "query",
                        "description": "withCounts",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contact groups and the number of contacts in each group",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my/{name}": {
            "get": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Fetch a contact group",
                "description": "This endpoint fetches the given contact list with the number of contacts in it",
                "operationId": "getOneUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group has been successfully removed",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/groups/my/{name}/contacts": {
            "get": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Gets the contacts of a contact group",
                "description": "Retrieves all the contacts marked by the specified group tag",
                "operationId": "getGroupContactsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contacts have been fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/ContactDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Adds contacts to a contact group",
                "description": "Adds a set of contacts to the specified contact group",
                "operationId": "addContactsToGroupUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "contacts",
                        "description": "contacts",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contacts have been updated",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "400": {
                        "description": "Contact id is not valid",
                        "schema": {
                            "$ref": "#/definitions/InvalidContactsServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Account is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contact Groups API"
                ],
                "summary": "Removes the contacts from the group",
                "description": "Removes the contacts",
                "operationId": "removeContactsUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "contactIds",
                        "description": "contactIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contacts have been removed from the group",
                        "schema": {
                            "$ref": "#/definitions/ContactGroupDto"
                        }
                    },
                    "400": {
                        "description": "Contacts limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/ContactsLimitExceededServiceException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "Contact id is not valid",
                        "schema": {
                            "$ref": "#/definitions/InvalidContactsServiceException"
                        }
                    }
                }
            }
        },
        "/lookup": {
            "post": {
                "tags": [
                    "Lookup API"
                ],
                "summary": "perform lookup",
                "description": "Performs a single lookup",
                "operationId": "performSingleLookupHLRUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lookupRequest",
                        "description": "lookupRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LookupRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Lookup info",
                        "schema": {
                            "$ref": "#/definitions/LookupResponseDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/lookup/tracking": {
            "post": {
                "tags": [
                    "Lookup API"
                ],
                "summary": "LookupTracking",
                "description": "Returns lookup tracking data",
                "operationId": "searchLookupTrackingUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "dateStart",
                        "in": "query",
                        "description": "dateStart",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dateEnd",
                        "in": "query",
                        "description": "dateEnd",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "filters",
                        "description": "filters",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SearchFilterDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The lookup tracking",
                        "schema": {
                            "$ref": "#/definitions/LookupResponseDto"
                        }
                    }
                }
            }
        },
        "/lookup/{lookupId}": {
            "get": {
                "tags": [
                    "Lookup API"
                ],
                "summary": "lookup delivery report",
                "description": "Returns the delivery report of a single lookup specified by the lookupId",
                "operationId": "getLookupTrackingUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "lookupId",
                        "in": "path",
                        "description": "lookupId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Lookup info",
                        "schema": {
                            "$ref": "#/definitions/LookupResponseDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/latency": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The sms latency report for a given account",
                "description": "Aggregates the sms count per life span for the specified date range",
                "operationId": "getMySmsLatencyReportUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The sms latency report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/SmsLatencyReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/latency/perCampaign": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The sms latency report for a given campaign id",
                "description": "Aggregates the sms count per life span for the specified date range and campaign id",
                "operationId": "getMySmsLatencyReportForCampaignIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "query",
                        "description": "campaignId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The sms latency report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/SmsLatencyReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/latency/perCountry": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The sms latency report for a given account",
                "description": "Aggregates the sms count per life span for the specified date range",
                "operationId": "getMySmsLatencyReportForCountryUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "query",
                        "description": "countryCode",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The sms latency report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/SmsLatencyReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/latency/perMccMnc": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The sms latency report for a given account",
                "description": "Aggregates the sms count per life span for the specified date range",
                "operationId": "getMySmsLatencyReportForMccMncUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "mcc",
                        "in": "query",
                        "description": "mcc",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mnc",
                        "in": "query",
                        "description": "mnc",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The sms latency report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/SmsLatencyReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/lookup/volPrice": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The volume and price report, grouped by date, for a given date range",
                "description": "Aggregates the lookup HLR counts and costs for the specified date range",
                "operationId": "getMyLookupVolPriceBreakdownReportUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The volume and price report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/LookupBreakdownReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/volPrice": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The volume and price report for a given account",
                "description": "Aggregates the sms counts and costs for the specified date range",
                "operationId": "getMyVolumePriceReportsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/VolPriceStatisticReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/volPrice/perCampaign": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The volume and price report for a given campaign id",
                "description": "Aggregates the sms counts and costs for the specified date range for the campaign id",
                "operationId": "getMyVolumePriceReportsForCampaignIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "query",
                        "description": "campaignId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "offset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/VolPriceStatisticReportDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/volPrice/perMcc": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The volume and price report for a given account and a given country",
                "description": "Aggregates the sms counts and costs for the specified date range for the given country",
                "operationId": "getMyVolumePriceReportsForMccUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "mcc",
                        "in": "query",
                        "description": "mcc",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/VolPriceStatisticReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/reports/my/volPrice/perMccMnc": {
            "get": {
                "tags": [
                    "Reports API"
                ],
                "summary": "The volume and price report for a given account, a given country and a given operator",
                "description": "Aggregates the sms counts and costs for the specified date range for the given country-operator",
                "operationId": "getMyVolumePriceReportsForMccMncUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "mcc",
                        "in": "query",
                        "description": "mcc",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mnc",
                        "in": "query",
                        "description": "mnc",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "startDate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "endDate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The report for the current account ",
                        "schema": {
                            "$ref": "#/definitions/VolPriceStatisticReportDto"
                        }
                    },
                    "400": {
                        "description": "Date range is invalid",
                        "schema": {
                            "$ref": "#/definitions/InvalidDateRangeException"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/AccountNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/sms": {
            "post": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "send sms",
                "description": "Sends an sms",
                "operationId": "sendSmsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "smsRequestDto",
                        "description": "smsRequestDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SmsRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Sms info",
                        "schema": {
                            "$ref": "#/definitions/SmsDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/sms/analyze": {
            "post": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "analyze sms",
                "description": "Analyzes an sms",
                "operationId": "analyzeSmsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "smsRequestDto",
                        "description": "smsRequestDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SmsRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The SmsAnalysis for the given sms request",
                        "schema": {
                            "$ref": "#/definitions/SmsAnalysisDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/sms/analyze/campaign": {
            "post": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "analyze sms campaign",
                "description": "Analyzes an sms campaign",
                "operationId": "analyzeSmsCampaignUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "campaignSmsRequestDto",
                        "description": "campaignSmsRequestDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignSmsRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The SmsAnalysis for the given campaign request",
                        "schema": {
                            "$ref": "#/definitions/SmsCampaignAnalysisDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/sms/campaign": {
            "post": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "send sms",
                "description": "Sends an sms campaign",
                "operationId": "sendSmsCampaignUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "campaignSmsRequestDto",
                        "description": "campaignSmsRequestDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignSmsRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created SmsCampaign",
                        "schema": {
                            "$ref": "#/definitions/SmsCampaignDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/sms/quietHours/countries/{language}": {
            "get": {
                "tags": [
                    "Quiet Hours API"
                ],
                "summary": "countries",
                "description": "Retrieves all countries translated in the given language with an extra flag tha indicates if its supported by quiet hours",
                "operationId": "countriesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "language",
                        "in": "path",
                        "description": "language",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QuietHourCountryDto"
                        }
                    }
                }
            }
        },
        "/sms/tracking": {
            "post": {
                "tags": [
                    "SMS Tracking API"
                ],
                "summary": "SmsTracking",
                "description": "Returns sms tracking data",
                "operationId": "searchUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "query",
                        "description": "trackingId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dateStart",
                        "in": "query",
                        "description": "dateStart",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dateEnd",
                        "in": "query",
                        "description": "dateEnd",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "campaign",
                        "in": "query",
                        "description": "campaign",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "body",
                        "name": "filters",
                        "description": "filters",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SearchFilterDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Sms tracking",
                        "schema": {
                            "$ref": "#/definitions/SmsTrackingDto"
                        }
                    }
                }
            }
        },
        "/sms/tracking/campaign/{id}": {
            "get": {
                "tags": [
                    "SMS Tracking API"
                ],
                "summary": "SmsTracking",
                "description": "Returns sms tracking data for messages included in a specific campaign",
                "operationId": "getCampaignUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Sms tracking",
                        "schema": {
                            "$ref": "#/definitions/SmsTrackingDto"
                        }
                    }
                }
            }
        },
        "/sms/tracking/single/{id}": {
            "get": {
                "tags": [
                    "SMS Tracking API"
                ],
                "summary": "SmsTracking",
                "description": "Returns sms tracking data for a single message",
                "operationId": "getSingleUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Sms tracking",
                        "schema": {
                            "$ref": "#/definitions/SmsTrackingDto"
                        }
                    }
                }
            }
        },
        "/sms/{trackingId}": {
            "put": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "update sms",
                "description": "Updates a scheduled sms",
                "operationId": "updateSmsUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "campaignSmsRequestDto",
                        "description": "campaignSmsRequestDto",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignSmsRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated SmsCampaign",
                        "schema": {
                            "$ref": "#/definitions/SmsCampaignDto"
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Messaging API"
                ],
                "summary": "delete sms",
                "description": "deletes a scheduled sms",
                "operationId": "deleteSmsUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "trackingId",
                        "in": "path",
                        "description": "trackingId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "In case the sms was deleted"
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        },
        "/system/prices": {
            "get": {
                "tags": [
                    "System API"
                ],
                "summary": "get pricing",
                "description": "returns prices for all services",
                "operationId": "getPriceTableUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "mcc",
                        "in": "query",
                        "description": "mcc",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "mnc",
                        "in": "query",
                        "description": "mnc",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "service",
                        "in": "query",
                        "description": "service",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "Sms",
                            "TwoStep",
                            "Audio",
                            "Lookup"
                        ]
                    },
                    {
                        "name": "currency",
                        "in": "query",
                        "description": "currency",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Queued",
                                "Sent",
                                "Failed",
                                "Delivered",
                                "Undelivered",
                                "Unsent"
                            ]
                        }
                    },
                    "403": {
                        "description": "User is not authenticated",
                        "schema": {
                            "$ref": "#/definitions/NotAuthenticatedServiceException"
                        }
                    },
                    "404": {
                        "description": "User is not found",
                        "schema": {
                            "$ref": "#/definitions/UserNotFoundServiceException"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "FieldDefinition": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Date",
                        "Number",
                        "Text",
                        "Unknown"
                    ]
                }
            }
        },
        "GroupMergeDto": {
            "type": "object",
            "required": [
                "groups",
                "name"
            ],
            "properties": {
                "groups": {
                    "type": "array",
                    "description": "The groups to be merged",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the new group to be created."
                }
            },
            "description": "Contains the tags of the groups that will be merged and the tag of the new group"
        },
        "SmsNetworkPriceDto": {
            "type": "object",
            "required": [
                "mnc",
                "network",
                "price"
            ],
            "properties": {
                "mnc": {
                    "type": "string",
                    "description": "The mnc"
                },
                "network": {
                    "type": "string",
                    "description": "The network name"
                },
                "price": {
                    "type": "number",
                    "description": "The price"
                }
            },
            "description": "Sms Price for a specific network"
        },    
        "SmsCountryPriceTableDto": {
            "type": "object",
            "required": [
                "country",
                "iso",
                "mcc",
                "networks"
            ],
            "properties": {
                "country": {
                    "type": "string",
                    "description": "The country name"
                },
                "iso": {
                    "type": "string",
                    "description": "The country iso code"
                },
                "mcc": {
                    "type": "string",
                    "description": "The mcc"
                },
                "networks": {
                    "type": "array",
                    "description": "The networks for this country",
                    "items": {
                        "$ref": "#/definitions/SmsNetworkPriceDto"
                    }
                }
            },
            "description": "Contains basic information about the country along with the network prices"
        },
        "VolPriceStatisticReportDto": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total messages count"
                },
                "country": {
                    "type": "string",
                    "description": "The country of this report"
                },
                "deliveredCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the delivered messages"
                },
                "failedCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the failed messages"
                },
                "mcc": {
                    "type": "string",
                    "description": "The Mcc of this report"
                },
                "mnc": {
                    "type": "string",
                    "description": "The Mnc of this report"
                },
                "operator": {
                    "type": "string",
                    "description": "The operator of this report"
                },
                "price": {
                    "type": "number",
                    "format": "double",
                    "description": "The total price for the total sms of this report for the customer"
                },
                "queuedCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the queued messages"
                },
                "sentCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the sent messages"
                },
                "smsCampaignId": {
                    "type": "string",
                    "description": "The campaign id of this report"
                },
                "startDateTime": {
                    "type": "string",
                    "description": "The starting date and time from which this report was generated"
                },
                "timeGrouping": {
                    "type": "string",
                    "description": "The grouping used in this report"
                },
                "undeliveredCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the undelivered messages"
                },
                "unsentCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the insufficient balance messages"
                }
            },
            "description": "Contains the analytics for a range of messages associated with the account id"
        },
        "TranscodeDto": {
            "type": "object",
            "required": [
                "message",
                "parts"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "The transcoded message of the original unicode message"
                },
                "parts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of actual sms that will be sent"
                }
            },
            "description": "Contains information for the transcoded body of an sms message"
        },
        "CurrencyDto": {
            "type": "object",
            "required": [
                "code",
                "localeName",
                "name",
                "sign"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The currency code in ISO 4217 format"
                },
                "localeName": {
                    "type": "string",
                    "description": "The currency name translated in its native language"
                },
                "name": {
                    "type": "string",
                    "description": "The currency name translated in the requested language"
                },
                "sign": {
                    "type": "string",
                    "description": "The currency sign"
                }
            },
            "description": "Represents a currency"
        },
        "CampaignDto": {
            "type": "object",
            "required": [
                "trackingId",
                "type"
            ],
            "properties": {
                "campaignName": {
                    "type": "string",
                    "description": "The name of the campaign"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time the campaign was created"
                },
                "respectQuietHours": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms should respects the quiet hours, default value: false"
                },
                "state": {
                    "type": "string",
                    "description": "The status of the campaign"
                },
                "trackingId": {
                    "type": "string",
                    "description": "The tracking number of the campaign"
                },
                "type": {
                    "type": "string",
                    "description": "The service type of the campaign"
                }
            },
            "description": "Basic information about a campaign"
        },
        "LookupBreakdownReportInfoDto": {
            "type": "object",
            "properties": {
                "absentCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the absent HLR lookup records"
                },
                "activeCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the active HLR lookup records"
                },
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count for the HLR lookup records of this report"
                },
                "failedCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the failed HLR lookup records"
                },
                "price": {
                    "type": "number",
                    "format": "double",
                    "description": "The price for the HLR lookup records of this report"
                },
                "queuedCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the queued HLR lookup records"
                },
                "startDateTime": {
                    "type": "string",
                    "description": "The starting date and time from which this report was generated"
                },
                "unknownCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the unknown HLR lookup records"
                }
            },
            "description": "Contains the details analytics for a range of HLR lookup records associated with the account id"
        },
        "CountryDto": {
            "type": "object",
            "required": [
                "code",
                "isoA3Code",
                "localeName",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The country code in ISO 3166-1 alpha-2 format"
                },
                "isoA3Code": {
                    "type": "string",
                    "description": "The code of the country in ISO 3166-1 alpha-2 format"
                },
                "localeName": {
                    "type": "string",
                    "description": "The country name translated in its native language"
                },
                "name": {
                    "type": "string",
                    "description": "The country name translated in the requested language"
                }
            },
            "description": "Represents a country"
        }, 
        "SmsLatencyReportDto": {
            "type": "object",
            "properties": {
                "smsLatencyCount": {
                    "type": "array",
                    "description": "A collection containing the count of the sms delivered by their latency",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "description": "Contains the sms latency array for specific matching criteria"
        }, 
        "QuietHourCountryDto": {
            "type": "object",
            "required": [
                "code",
                "isoA3Code",
                "localeName",
                "name",
                "supported"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The country code in ISO 3166-1 alpha-2 format"
                },
                "isoA3Code": {
                    "type": "string",
                    "description": "The code of the country in ISO 3166-1 alpha-2 format"
                },
                "localeName": {
                    "type": "string",
                    "description": "The country name translated in its native language"
                },
                "name": {
                    "type": "string",
                    "description": "The country name translated in the requested language"
                },
                "supported": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the country is supported by the quiet hours feature"
                }
            },
            "description": "Contains information for an sms message after being analyzed"
        },
        "ContactRecipientInfoDto": {
            "type": "object",
            "required": [
                "blacklisted",
                "recipient",
                "recipientCountry"
            ],
            "properties": {
                "blacklisted": {
                    "type": "boolean",
                    "example": false,
                    "description": "If the contact is in blacklist (he will not receive a message)"
                },
                "recipient": {
                    "type": "string",
                    "description": "The recipient"
                },
                "recipientCountry": {
                    "type": "string",
                    "description": "The country of the recipient extracted by the country code"
                }
            },
            "description": "Contains information about a contact after being analyzed"
        },
        "ContactGroupDto": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the group"
                },
                "size": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The size of the group (number of contacts)"
                }
            },
            "description": "Contains the group  name and the total count of contacts in the group"
        },
        "CallbackInfoDto": {
            "type": "object",
            "required": [
                "strategy",
                "url"
            ],
            "properties": {
                "strategy": {
                    "type": "string",
                    "description": "When the URL will be called, on every status change (OnChange) or when a final status arrives (OnCompletion)"
                },
                "url": {
                    "type": "string",
                    "description": "The URL that will be called when an update occurs"
                }
            },
            "description": "Information about a DLR callback"
        }, 
        "SenderOptionDto": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "description": "Options for the sender"
        },
        "LookupNetworkDto": {
            "type": "object",
            "properties": {
                "mnc": {
                    "type": "string",
                    "description": "The code of the number's ported network"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the number's ported network"
                }
            },
            "description": "Represents the information about the look up number network"
        },
        "TwoStepReportDto": {
            "type": "object",
            "required": [
                "applicationId",
                "perCountry",
                "total",
                "totals"
            ],
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The id of the application"
                },
                "perCountry": {
                    "type": "object",
                    "description": "The total number of requests send, grouped by country and by status",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The total number of requests send"
                },
                "totals": {
                    "type": "object",
                    "description": "The total number of requests send grouped by status",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "description": "A report that represents the number of verification requests per statusand by country and status, send by a specific application."
        },
        "ContactLabelDto": {
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the custom field"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the custom field. Supported types are : Text, Date or Number"
                },
                "value": {
                    "type": "object",
                    "description": "The value of the custom field"
                }
            },
            "description": "Contains the name, the value and the type of a contact's custom field."
        },
        "LookupRoamingDto": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "description": "The country name of the roaming network"
                },
                "countryIsoCode": {
                    "type": "string",
                    "description": "The country code in ISO 3166-1 alpha-2 format"
                },
                "mcc": {
                    "type": "string",
                    "description": "The country code of the roaming network"
                },
                "mnc": {
                    "type": "string",
                    "description": "The network code of the roaming network"
                },
                "network": {
                    "type": "string",
                    "description": "The network name of the roaming network"
                },
                "state": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the number is in roaming mode"
                }
            },
            "description": "Information about the ported network and the country of the number that the lookup request is performed"
        },
        "SecurityMessageOptionDto": {
            "type": "object",
            "properties": {
                "lifetimeInSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Indicates the number of seconds that the verification will be valid, when that time passes the user will not be able to confirm the request"
                },
                "maxRetries": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times the user is allowed to enter a wrong answer before the verification becomes invalid"
                },
                "type": {
                    "type": "string"
                }
            },
            "description": "Options for the security message"
        },
        "BalanceChangeDto": {
            "type": "object",
            "required": [
                "balanceAfter",
                "balanceBefore"
            ],
            "properties": {
                "balanceAfter": {
                    "type": "number",
                    "description": "The balance after the transaction"
                },
                "balanceBefore": {
                    "type": "number",
                    "description": "The balance before the transaction"
                }
            },
            "description": "Represents a change to the balance after successfully adding a transaction"
        },
        "SmsStatusDto": {
            "type": "object",
            "required": [
                "date",
                "status"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "description": "The date that the status was reported"
                },
                "reason": {
                    "type": "string",
                    "description": "An extra reason for the status"
                },
                "status": {
                    "type": "string",
                    "description": "The status"
                }
            },
            "description": "Represents a status for an sms"
        },
        "GroupDeleteResponseDto": {
            "type": "object",
            "properties": {
                "deletedContacts": {
                    "type": "boolean",
                    "example": false,
                    "description": "Defines whether the contacts of the group have been deleted or not"
                },
                "name": {
                    "type": "string",
                    "description": "The tag of the group that has been deleted"
                }
            },
            "description": "Contains the deleted tag and whether its contacts have been deleted"
        },
        "SmsTestCampaignDto": {
            "type": "object",
            "required": [
                "to"
            ],
            "properties": {
                "minutesAfter": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minutes after the scheduled date (that the sms will be send) that the test sms will be send"
                },
                "minutesBefore": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minutes before the scheduled date (that the sms will be send) that the test sms will be send"
                },
                "to": {
                    "type": "array",
                    "description": "The recipients of this sms that will get a test sms before and/or after the campaign will start. Must be a list with valid mobile numbers starting with + and the country code",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "Represents a test sms that will be send before and/or after the actual sms"
        },
        "ContactCustomField": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Date",
                        "Number",
                        "Text",
                        "Unknown"
                    ]
                },
                "value": {
                    "type": "object"
                }
            }
        }, 
        "SearchFilter": {
            "type": "object",
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "searchOperator": {
                    "type": "string",
                    "enum": [
                        "is",
                        "is_not",
                        "contains",
                        "starts_with",
                        "ends_with"
                    ]
                },
                "searchTerm": {
                    "type": "object"
                }
            }
        },
        "SearchFilterDto": {
            "type": "object",
            "required": [
                "fieldName",
                "searchTerm"
            ],
            "properties": {
                "fieldName": {
                    "type": "string",
                    "description": "Defines the name of the field for this filter"
                },
                "searchOperator": {
                    "type": "string",
                    "description": "Defines the search operator to be used for the search. Examples: is, is_not, contains, starts_with, ends_with"
                },
                "searchTerm": {
                    "type": "object",
                    "description": "Defines the search term to be used for the search"
                }
            },
            "description": "Contains the field and term information for a search filter"
        },
        "VerificationStatusDto": {
            "type": "object",
            "required": [
                "status",
                "trackingId",
                "updatedAt"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status of the verification. \nPending: When the verification is created and is waiting for a confirmation, \nVerified: A correct answer was provided, \nCancelled: The verification was cancelled,\nExpired: The verification is expired,\nFailed: A wrong answer was provided"
                },
                "trackingId": {
                    "type": "string",
                    "description": "The tracking id "
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date that this verification was update"
                }
            },
            "description": "Represents status information about a verification request"
        }, 
        "NumericUpdateResultDto": {
            "type": "object",
            "properties": {
                "updated": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "LookupBreakdownReportSummaryDto": {
            "type": "object",
            "properties": {
                "timeGrouping": {
                    "type": "string",
                    "description": "The grouping used in this report"
                },
                "totalAbsent": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total absent"
                },
                "totalActive": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total active"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total count"
                },
                "totalFailed": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total failed"
                },
                "totalPrice": {
                    "type": "number",
                    "format": "double",
                    "description": "The total price"
                },
                "totalQueued": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total queued"
                },
                "totalUnknown": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total unknown"
                }
            },
            "description": "Contains the totals analytics for a range of HLR lookup records associated with the account id"
        },
        "LabelDefinitionDto": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the custom field"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the custom field. Supported types are : Text, Date or Number"
                }
            },
            "description": "Contains the name and the type of a contact's custom field definition."
        },
        "BankDto": {
            "type": "object",
            "required": [
                "address",
                "country",
                "currency",
                "iban",
                "minAmount",
                "name",
                "number",
                "swiftCode"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the bank"
                },
                "country": {
                    "type": "string",
                    "description": "The country of the bank"
                },
                "currency": {
                    "type": "string",
                    "description": "The currency of the bank"
                },
                "iban": {
                    "type": "string",
                    "description": "The iban of the bank"
                },
                "minAmount": {
                    "type": "number",
                    "description": "The min amount to transfer money to this bank"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bank"
                },
                "number": {
                    "type": "string",
                    "description": "The number of the bank"
                },
                "swiftCode": {
                    "type": "string",
                    "description": "The swift code of the bank"
                }
            },
            "description": "Represents a bank"
        },
        "StackTraceElement": {
            "type": "object",
            "properties": {
                "className": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "lineNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "methodName": {
                    "type": "string"
                },
                "nativeMethod": {
                    "type": "boolean"
                }
            }
        },
        "LookupStatusInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A more descriptive information about the status of the request"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the look up request"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date that the request's status has been updated"
                }
            },
            "description": " Information about the status related to the given mobile number after the lookup service is performed."
        }, 
        "TransactionActionDto": {
            "type": "object",
            "required": [
                "amount",
                "balanceAfter",
                "balanceBefore",
                "date",
                "id",
                "status",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "description": "The amount of the action"
                },
                "balanceAfter": {
                    "type": "number",
                    "description": "The amount of balance that the account had after the processing of the action"
                },
                "balanceBefore": {
                    "type": "number",
                    "description": "The amount of balance that the account had before the action was processed"
                },
                "date": {
                    "type": "string",
                    "description": "The date that the action was created"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the action"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the action (Completed, Pending)"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the action (Paid, Credit, ChangeStatus, Remove, Refund)"
                }
            },
            "description": "Represents a transaction action"
        },  


        "Throwable": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },

                                                  
                                                     
        "InvalidSearchFiltersServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "rejectedSearchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SearchFilter"
                    }
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "SmsRequestDto": {
            "type": "object",
            "required": [
                "body",
                "from"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The message of the sms"
                },
                "callback": {
                    "description": "Defines the notification callback information for an individual message progress of the SMS campaign.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "flash": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms is a flash sms, default value: false"
                },
                "from": {
                    "type": "string",
                    "description": "The sender id for this sms"
                },
                "label": {
                    "type": "string",
                    "description": "A generic label using for tagging the sms"
                },
                "to": {
                    "type": "string",
                    "description": "The recipient of this sms, must be a list with valid mobile numbers starting with + and the country code"
                }
            },
            "description": "Represents a request for sending a single sms"
        },
        "AccountNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ContactListAlreadyExistsServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ContactDto": {
            "type": "object",
            "required": [
                "mobile"
            ],
            "properties": {
                "blacklistedServices": {
                    "type": "array",
                    "description": "Defines all the services for which the contact has been blacklisted",
                    "items": {
                        "type": "string"
                    }
                },
                "country": {
                    "type": "string",
                    "description": "The Country information of the contact"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the contact"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the contact"
                },
                "groups": {
                    "type": "array",
                    "description": "All contact groups that belong to this Contact",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The identification of the contact"
                },
                "labels": {
                    "type": "array",
                    "description": "Contains the contact's custom fields with their respective values",
                    "items": {
                        "$ref": "#/definitions/ContactLabelDto"
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the contact"
                },
                "mobile": {
                    "type": "string",
                    "description": "The mobile number of the contact"
                },
                "vip": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates whether the contact is treated as vip or not"
                }
            },
            "description": "Represents an single contact of an account of the application"
        },
        "Sort": {
            "type": "object"
        },
        "VerificationNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },

        "NotAuthenticatedServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "PricingEntityDto": {
            "type": "object",
            "required": [
                "address",
                "banks",
                "email",
                "name",
                "phone",
                "vatId"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the entity"
                },
                "banks": {
                    "type": "array",
                    "description": "The available banks for this entity",
                    "items": {
                        "$ref": "#/definitions/BankDto"
                    }
                },
                "email": {
                    "type": "string",
                    "description": "The email of the entity"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the entity"
                },
                "phone": {
                    "type": "string",
                    "description": "The phone of the entity"
                },
                "vatId": {
                    "type": "string",
                    "description": "The vat id of the entity"
                }
            },
            "description": "Represents the a pricing entity with the available banks"
        },
        "ContactListNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Page«ContactDto»": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactDto"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Character": {
            "type": "object"
        },
        "Page«TransactionDto»": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionDto"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },

        "DuplicateCustomFieldServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "duplicateCustomFieldNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactCustomField"
                    }
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "VerificationExpiredServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "LookupTrackingDto": {
            "type": "object",
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The name of the application which executed the lookup"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date that the look up request was performed"
                },
                "details": {
                    "description": "Details about the country of the number that the look up request is performed",
                    "$ref": "#/definitions/LookupDetailsDto"
                },
                "groups": {
                    "type": "array",
                    "description": "All contact groups that belong to this LookupTracking",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "type": "string",
                    "description": "The label that the user may has provided when the llokup service was called"
                },
                "lookupId": {
                    "type": "string",
                    "description": "The number's network name"
                },
                "price": {
                    "type": "number",
                    "description": "The price of the Lookup Operation"
                },
                "statusInfo": {
                    "description": "Information about the lookup request status",
                    "$ref": "#/definitions/LookupStatusInfo"
                },
                "to": {
                    "type": "string",
                    "description": "The number for which the lookup service was called"
                }
            },
            "description": "Represents the information about the look up number"
        },
        "SmsCampaignDto": {
            "type": "object",
            "required": [
                "body",
                "contacts",
                "from",
                "groups",
                "smsAnalysis",
                "to",
                "trackingId",
                "type"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The message"
                },
                "callback": {
                    "description": "Defines the notification callback information for an individual message progress of the SMS campaign.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "campaignCallback": {
                    "description": "Defines the notification callback information for updates about the SMS campaign progress.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "campaignName": {
                    "type": "string",
                    "description": "The name of the campaign"
                },
                "contacts": {
                    "type": "array",
                    "description": "The contacts",
                    "items": {
                        "type": "string"
                    }
                },
                "cost": {
                    "type": "number",
                    "format": "double",
                    "description": "The cost of the campaign. If the campaign is running then the cost is constantly updated when a new sms is sent"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time the campaign was created"
                },
                "endedAt": {
                    "type": "string",
                    "description": "The time the campaign was processed and all messages left from Routee."
                },
                "fallbackValues": {
                    "type": "object",
                    "description": "Defines the default values when the sms campaign has bonus fields, in case a contact does not contain any of these fields",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "flash": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms is a flash sms"
                },
                "from": {
                    "type": "string",
                    "description": "The sender id"
                },
                "groups": {
                    "type": "array",
                    "description": "The lists",
                    "items": {
                        "type": "string"
                    }
                },
                "reminder": {
                    "description": "Defines the recipients that will receive a test sms before and/or after the actual sms will be send",
                    "$ref": "#/definitions/SmsTestCampaignDto"
                },
                "respectQuietHours": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms should respects the quiet hours, default value: false"
                },
                "scheduledDate": {
                    "type": "string",
                    "description": "The time the campaign was scheduled to run"
                },
                "smsAnalysis": {
                    "description": "The analysis data for this sms",
                    "$ref": "#/definitions/SmsCampaignAnalysisDto"
                },
                "state": {
                    "type": "string",
                    "description": "The status of the campaign"
                },
                "statuses": {
                    "type": "object",
                    "description": "Defines the number of sms per message status",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "to": {
                    "type": "array",
                    "description": "The recipient",
                    "items": {
                        "type": "string"
                    }
                },
                "totalMessages": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The actual sms messages that will be sent"
                },
                "trackingId": {
                    "type": "string",
                    "description": "The tracking number of the campaign"
                },
                "type": {
                    "type": "string",
                    "description": "The service type of the campaign"
                }
            },
            "description": "Represents a status for an Sms campaign"
        },
        "Page«ContactGroupDto»": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactGroupDto"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },

        "InvalidContactsServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "rejectedContacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "UserNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "LookupRequestDto": {
            "type": "object",
            "required": [
                "to"
            ],
            "properties": {
                "label": {
                    "type": "string",
                    "description": "A generic label using for tagging the number"
                },
                "to": {
                    "type": "string",
                    "description": "The number that the hlr service will use"
                }
            },
            "description": "Represents the information required to perform the look up"
        },
        "Map«string,long»": {
            "type": "object",
            "additionalProperties": {
                "type": "integer",
                "format": "int64"
            }
        },
        "SmsDto": {
            "type": "object",
            "required": [
                "body",
                "bodyAnalysis",
                "from",
                "to",
                "trackingId"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The message"
                },
                "bodyAnalysis": {
                    "description": "The analysis data for this sms",
                    "$ref": "#/definitions/SmsBodyAnalysisDto"
                },
                "callback": {
                    "description": "Defines the notification callback information for an individual message progress of the SMS campaign.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time that the SMS was created"
                },
                "flash": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms is a flash sms"
                },
                "from": {
                    "type": "string",
                    "description": "The sender id"
                },
                "label": {
                    "type": "string",
                    "description": "A generic label using for tagging the sms"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the SMS"
                },
                "to": {
                    "type": "string",
                    "description": "The recipient"
                },
                "trackingId": {
                    "type": "string",
                    "description": "The message id"
                }
            },
            "description": "Represents a status for a single Sms"
        },
        "FieldDefinitionAlreadyExistsServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "duplicateFieldDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldDefinition"
                    }
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "DuplicateCustomLabelNameServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "Page«LookupResponseDto»": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LookupResponseDto"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },



        "GroupCreationDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "filters": {
                    "type": "array",
                    "description": "The filters to apply and create the group from their result",
                    "items": {
                        "$ref": "#/definitions/SearchFilterDto"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group to be created."
                },
                "strategy": {
                    "type": "string",
                    "description": "Defines the way that the group should be populated. If not set (or set to 'None') the group will be empty.If it's set to 'Filtered' the group will be populated based on the filters provided. If it's set to 'All', the groupwill include all the contacts of the account.",
                    "enum": [
                        "All",
                        "None",
                        "Filtered"
                    ]
                }
            },
            "description": "Contains the tag of the new group and the criteria to define its contacts (contact collection or filters)"
        },
        "Page«SmsTrackingDto»": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SmsTrackingDto"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
     
        "LookupResponseDto": {
            "type": "object",
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The name of the application which executed the lookup"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date that the look up request was performed"
                },
                "details": {
                    "description": "Details about the country of the number that the look up request is performed",
                    "$ref": "#/definitions/LookupDetailsDto"
                },
                "groups": {
                    "type": "array",
                    "description": "All contact groups that belong to this LookupTracking",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "type": "string",
                    "description": "The label that the user may has provided when the llokup service was called"
                },
                "lookupId": {
                    "type": "string",
                    "description": "The number's network name"
                },
                "statusInfo": {
                    "description": "Information about the lookup request status",
                    "$ref": "#/definitions/LookupStatusInfo"
                },
                "to": {
                    "type": "string",
                    "description": "The number for which the lookup service was called"
                }
            },
            "description": "Represents the information about the look up number"
        },
        "TransactionDto": {
            "type": "object",
            "required": [
                "actions",
                "amount",
                "balanceAfter",
                "balanceBefore",
                "date",
                "id",
                "source",
                "status",
                "transactionType"
            ],
            "properties": {
                "actions": {
                    "type": "array",
                    "description": "All the actions of this transaction",
                    "items": {
                        "$ref": "#/definitions/TransactionActionDto"
                    }
                },
                "amount": {
                    "type": "number",
                    "description": "The amount"
                },
                "balanceAfter": {
                    "type": "number",
                    "description": "The amount of balance that the account had after the processing of the transaction"
                },
                "balanceBefore": {
                    "type": "number",
                    "description": "The amount of balance that the account had before the transaction was processed"
                },
                "date": {
                    "type": "string",
                    "description": "The date that the transaction was created"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the transaction"
                },
                "source": {
                    "type": "string",
                    "description": "The source that initiated this transaction (e.g. Paypal)"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the transaction (PendingNotCredited, Pending, Completed)"
                },
                "transactionType": {
                    "type": "string",
                    "description": "The type of the transaction (always TopUp)"
                }
            },
            "description": "Represents a Master Account transaction"
        },
        "LookupTrackingNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "PriceTableDto": {
            "type": "object",
            "required": [
                "currency",
                "lookup",
                "sms",
                "twoStep"
            ],
            "properties": {
                "currency": {
                    "description": "The currency of all the prices",
                    "$ref": "#/definitions/CurrencyDto"
                },
                "lookup": {
                    "type": "object",
                    "description": "The price list for lookup service",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "sms": {
                    "type": "array",
                    "description": "The price list for sms service",
                    "items": {
                        "$ref": "#/definitions/SmsCountryPriceTableDto"
                    }
                },
                "twoStep": {
                    "type": "object",
                    "description": "The price list for 2step service",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            },
            "description": "Contains a price list for each service"
        },

        "SmsBodyAnalysisDto": {
            "type": "object",
            "required": [
                "characters",
                "parts",
                "unicode",
                "unsupportedGSMCharacters"
            ],
            "properties": {
                "characters": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of characters"
                },
                "parts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of actual sms that will be sent"
                },
                "transcode": {
                    "description": "Contains information for the transcoded body of the sms message",
                    "$ref": "#/definitions/TranscodeDto"
                },
                "unicode": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the body contains unicode characters"
                },
                "unsupportedGSMCharacters": {
                    "type": "array",
                    "description": "Which characters caused the message to be considered as unicode",
                    "items": {
                        "$ref": "#/definitions/Character"
                    }
                }
            },
            "description": "Contains information for a body of an sms message after being analyzed"
        },
        "SmsCampaignAnalysisDto": {
            "type": "object",
            "required": [
                "bodyAnalysis",
                "contacts",
                "numberOfRecipients",
                "recipientCountries",
                "recipientsPerCountry",
                "recipientsPerGroup",
                "totalInGroups"
            ],
            "properties": {
                "bodyAnalysis": {
                    "description": "The analysis for the body of the sms.",
                    "$ref": "#/definitions/SmsBodyAnalysisDto"
                },
                "contacts": {
                    "type": "object",
                    "description": "For each contact the details (ContactRecipientInfoDto) of the contact",
                    "additionalProperties": {
                        "$ref": "#/definitions/ContactRecipientInfoDto"
                    }
                },
                "numberOfRecipients": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of recipients"
                },
                "recipientCountries": {
                    "type": "object",
                    "description": "For each recipient the country that the mobile belongs to (country format in ISO 3166-1 alpha-2)",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "recipientsPerCountry": {
                    "type": "object",
                    "description": "The total recipients per country (country format in ISO 3166-1 alpha-2)",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "recipientsPerGroup": {
                    "type": "object",
                    "description": "For each group the number of recipients that it contains without the blacklisted contacts",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "totalInGroups": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of recipients in all given lists excluding the ones already specified and the blacklisted"
                }
            },
            "description": "Contains information for an sms campaign after being analyzed"
        },
        "SmsTrackingDto": {
            "type": "object",
            "required": [
                "applicationName",
                "body",
                "campaignName",
                "country",
                "direction",
                "from",
                "groups",
                "latency",
                "messageId",
                "operator",
                "originatingService",
                "parts",
                "price",
                "smsId",
                "status",
                "to"
            ],
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The name of the application that was used to send this message"
                },
                "body": {
                    "type": "string",
                    "description": "The message of the sms"
                },
                "campaignName": {
                    "type": "string",
                    "description": "The name of the campaign that this message was send from"
                },
                "country": {
                    "type": "string",
                    "description": "The country of the recipient"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the message (Outbound, Inbound)"
                },
                "from": {
                    "type": "string",
                    "description": "The sender"
                },
                "groups": {
                    "type": "array",
                    "description": "The lists that the recipient belongs",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "type": "string",
                    "description": "A generic label using for tagging the sms"
                },
                "latency": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The overall delivery latency of the message"
                },
                "messageId": {
                    "type": "string",
                    "description": "The id of the message."
                },
                "operator": {
                    "type": "string",
                    "description": "The operator of the recipient"
                },
                "originatingService": {
                    "type": "string",
                    "description": "The service that send this message"
                },
                "parts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of parts"
                },
                "price": {
                    "type": "number",
                    "description": "The price of this sms"
                },
                "smsId": {
                    "type": "string",
                    "description": "The id of one of the sms parts included in a message"
                },
                "status": {
                    "description": "The status of the sms tracking",
                    "$ref": "#/definitions/SmsStatusDto"
                },
                "to": {
                    "type": "string",
                    "description": "The recipient"
                }
            },
            "description": "Represents a tracking for a specific sms"
        },

        "ContactNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },

        
        "LookupDetailsDto": {
            "type": "object",
            "required": [
                "country",
                "mcc"
            ],
            "properties": {
                "country": {
                    "description": "The country of the specified number",
                    "$ref": "#/definitions/CountryDto"
                },
                "imsi": {
                    "type": "string",
                    "description": "Is used to identify the user of a cellular network and is a unique identification associated with all cellular networks"
                },
                "mcc": {
                    "type": "string",
                    "description": "The country code of the specified number"
                },
                "msiddn": {
                    "type": "string",
                    "description": "The number uniquely identifying a subscription in a GSM or a UMTS mobile network"
                },
                "network": {
                    "description": "Details about the network of the number that the look up request is performed",
                    "$ref": "#/definitions/LookupNetworkDto"
                },
                "ported": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the number's network has changed"
                },
                "portedNetwork": {
                    "description": "Information about the ported network's code and name",
                    "$ref": "#/definitions/LookupNetworkDto"
                },
                "roamingNetwork": {
                    "$ref": "#/definitions/LookupRoamingDto"
                }
            },
            "description": "Represents information for the country of the specified number"
        },
        "InvalidVerificationStatusServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
       
        
        "CampaignSmsRequestDto": {
            "type": "object",
            "required": [
                "body",
                "campaignName",
                "from"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The message of the sms"
                },
                "callback": {
                    "description": "Defines the notification callback information for an individual message progress of the SMS campaign.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "campaignCallback": {
                    "description": "Defines the notification callback information for updates about the SMS campaign progress.",
                    "$ref": "#/definitions/CallbackInfoDto"
                },
                "campaignName": {
                    "type": "string",
                    "description": "The (campaign) name for this sms"
                },
                "contacts": {
                    "type": "array",
                    "description": "The contacts of this sms, must be a list with valid contact ids",
                    "items": {
                        "type": "string"
                    }
                },
                "fallbackValues": {
                    "type": "object",
                    "description": "Defines the default values when the sms campaign has bonus fields, in case a contact does not contain any of these fields",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "flash": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms is a flash sms, default value: false"
                },
                "from": {
                    "type": "string",
                    "description": "The sender id for this sms"
                },
                "groups": {
                    "type": "array",
                    "description": "The lists of this sms, must be a list with valid group names",
                    "items": {
                        "type": "string"
                    }
                },
                "reminder": {
                    "description": "Defines the recipients that will receive a test sms before and/or after the actual sms will be send",
                    "$ref": "#/definitions/SmsTestCampaignDto"
                },
                "respectQuietHours": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates if the sms should respect the quiet hours, default value: false"
                },
                "scheduledDate": {
                    "type": "string",
                    "description": "The future date that the sms campaign will be executed at"
                },
                "to": {
                    "type": "array",
                    "description": "The recipients of this sms, must be a list with valid mobile numbers starting with + and the country code",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "Represents a request for sending an sms campaign"
        },
        "LookupBreakdownReportDto": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "description": "The details of this report",
                    "items": {
                        "$ref": "#/definitions/LookupBreakdownReportInfoDto"
                    }
                },
                "totals": {
                    "description": "The totals of this report",
                    "$ref": "#/definitions/LookupBreakdownReportSummaryDto"
                }
            },
            "description": "Contains the analytics for a range of HLR lookup records associated with the account id"
        },

        "ContactsLimitExceededServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "WrongAnswerServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
        "InvalidCustomFieldsServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "rejectedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactCustomField"
                    }
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },
     
        "ContactMobileAlreadyExistsServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        
        "VerificationDto": {
            "type": "object",
            "required": [
                "recipient"
            ],
            "properties": {
                "arguments": {
                    "type": "object",
                    "description": "A list of arguments for the template message.For example, if the template message contains an @@name and a name:john is send as an argument the @@name will be replaced with john",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "recipient": {
                    "type": "string",
                    "description": "The recipient to send the sms message to (must be a valid phone number)"
                },
                "securityMessageOption": {
                    "$ref": "#/definitions/SecurityMessageOptionDto"
                },
                "senderOption": {
                    "$ref": "#/definitions/SenderOptionDto"
                },
                "template": {
                    "type": "string",
                    "description": "The template to send to the user, if not provided the appropriate template from the settings will be send. The template must contain the @@pin that will be replaced by the generated code"
                },
                "templateCountry": {
                    "type": "string",
                    "description": "The country that will be used to select the appropriate template (if a template wasn't specified in this request).If not provided the country will be exported from the recipient mobile number"
                }
            },
            "description": "A verification request. When send it will initiate the two step verification process"
        },
        "BalanceDto": {
            "type": "object",
            "required": [
                "balance",
                "currency"
            ],
            "properties": {
                "balance": {
                    "type": "number",
                    "description": "The balance"
                },
                "currency": {
                    "description": "The currency",
                    "$ref": "#/definitions/CurrencyDto"
                }
            },
            "description": "Represents the balance of an Account"
        },
        "InvalidDateRangeException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },

        "AuthenticationServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        },

        "FieldDefinitionNotFoundServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "notFoundFieldDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldDefinition"
                    }
                },
                "property": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "SmsAnalysisDto": {
            "type": "object",
            "required": [
                "bodyAnalysis",
                "cost"
            ],
            "properties": {
                "bodyAnalysis": {
                    "description": "The analysis for the body of the sms.",
                    "$ref": "#/definitions/SmsBodyAnalysisDto"
                },
                "cost": {
                    "type": "number",
                    "format": "double",
                    "description": "The cost of the sms."
                }
            },
            "description": "Contains information for an sms message after being analyzed"
        },
        "ContactNotDeletedServiceException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable"
                },
                "code": {
                    "type": "string"
                },
                "developerMessage": {
                    "type": "string"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable"
                    }
                }
            }
        }

    }
}